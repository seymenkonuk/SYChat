export function arrayBufferToHex(e){const r=new Uint8Array(e);let t="";return r.forEach((e=>{t+=e.toString(16).padStart(2,"0")})),t}export function hexToArrayBuffer(e){const r=e.length/2,t=new ArrayBuffer(r),a=new Uint8Array(t);for(let t=0;t<r;t++)a[t]=parseInt(e.substr(2*t,2),16);return t}export async function generateKey(){return await crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},!0,["deriveKey","deriveBits"])}export async function exportPublicKey(e){return arrayBufferToHex(await crypto.subtle.exportKey("spki",e))}export async function exportPrivateKey(e){return arrayBufferToHex(await crypto.subtle.exportKey("pkcs8",e))}async function importPublicKey(e){const r=hexToArrayBuffer(e);return await crypto.subtle.importKey("spki",r,{name:"ECDH",namedCurve:"P-256"},!0,[])}async function importPrivateKey(e){const r=hexToArrayBuffer(e);return await crypto.subtle.importKey("pkcs8",r,{name:"ECDH",namedCurve:"P-256"},!0,["deriveKey","deriveBits"])}async function deriveSharedSecret(e,r){return await crypto.subtle.deriveBits({name:"ECDH",public:r},e,256)}export async function diffieHellman(e,r){const t=await importPublicKey(r),a=await importPrivateKey(e);return arrayBufferToHex(await deriveSharedSecret(a,t))}